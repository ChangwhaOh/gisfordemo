{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to gisfordemo","text":"<p>practice</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://ChangwhaOh.github.io/gisfordemo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-february-24-2023","title":"v0.0.1 - February 24, 2023","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>Initial release</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/ChangwhaOh/gisfordemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>gisfordemo could always use more documentation, whether as part of the official gisfordemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/ChangwhaOh/gisfordemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up gisfordemo for local development.</p> <ol> <li> <p>Fork the gisfordemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/gisfordemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv gisfordemo\n$ cd gisfordemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 gisfordemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/ChangwhaOh/gisfordemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"gisfordemo/","title":"gisfordemo module","text":"<p>Main module.</p>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map","title":"<code> Map            (Map)         </code>","text":"<p>Class 'Map'</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>_type_</code> <p>description</p> required Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>class Map(ipyleaflet.Map):\n\"\"\"Class 'Map'\n\n    Args:\n        ipyleaflet (_type_): _description_\n    \"\"\"\n    def __init__(self, center = [37.5, 127], zoom = 8, **kwargs):\n\"\"\"_summary_\n\n        Args:\n            center (list): _description_\n            zoom (int): _description_\n        \"\"\"        \n        if 'scroll_wheel_zoom' not in kwargs:\n            kwargs['scroll_wheel_zoom'] = True\n        super().__init__(center = center, zoom = zoom, **kwargs) # inherited from the parent, in this case, ipyleaflet\n\n        if 'layers_control' not in kwargs:\n            kwargs['layers_control'] = True\n\n        if kwargs['layers_control']:\n            self.add_layers_control()\n\n        self.add_search_control()\n\n\n\n    def add_search_control(self, position = 'topleft', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            position (str, optional): _description_. Defaults to 'topleft'.\n        \"\"\"        \n        if 'url' not in kwargs:\n            kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n        search_control = ipyleaflet.SearchControl(position = position, **kwargs)\n        self.add_control(search_control)\n\n\n    def add_draw_control(self, position = 'topleft', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            position (str, optional): _description_. Defaults to 'topleft'.\n        \"\"\"        \n        draw_control = ipyleaflet.DrawControl(position = position, **kwargs)\n        self.add_control(draw_control)\n\n\n    def add_layers_control(self, position = 'topright', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            position (str, optional): _description_. Defaults to 'topright'.\n        \"\"\"        \n        layers_control = ipyleaflet.LayersControl(position = position, **kwargs)\n        self.add_control(layers_control)\n\n\n    def add_tile_layer(self, url, name, attribution = '', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            url (str): _description_\n            name (str): _description_\n            attribution (str, optional): _description_. Defaults to ''.\n        \"\"\"        \n        tile_layer = ipyleaflet.TileLayer(\n            url = url,\n            name = name,\n            attribution = attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n\n    def add_basemap(self, basemap, **kwargs):\n\"\"\"_summary_\n\n        Args:\n            basemap (str): _description_\n\n        Raises:\n            ValueError: _description_\n        \"\"\"\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == 'roadmap':\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name = basemap, **kwargs)\n        elif basemap.lower() == 'satellite':\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name = basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f'xyz.{basemap}')\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name = basemap, attribution = attribution, **kwargs)\n            except:\n                raise ValueError(f'{basemap} is not found')\n\n\n    def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            data (str): _description_\n            name (str, optional): _description_. Defaults to 'GeoJSON'.\n        \"\"\"        \n        if isinstance(data, str):\n            import json\n            with open(data, 'r') as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n        self.add_layer(geojson)\n\n\n    def add_shp(self, data, name = 'ShapeFile', **kwargs):\n\"\"\"_summary_\n\n        Args:\n            data (str): _description_\n            name (str, optional): _description_. Defaults to 'ShapeFile'.\n        \"\"\"        \n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_layer(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.__init__","title":"<code>__init__(self, center=[37.5, 127], zoom=8, **kwargs)</code>  <code>special</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>description</p> <code>[37.5, 127]</code> <code>zoom</code> <code>int</code> <p>description</p> <code>8</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def __init__(self, center = [37.5, 127], zoom = 8, **kwargs):\n\"\"\"_summary_\n\n    Args:\n        center (list): _description_\n        zoom (int): _description_\n    \"\"\"        \n    if 'scroll_wheel_zoom' not in kwargs:\n        kwargs['scroll_wheel_zoom'] = True\n    super().__init__(center = center, zoom = zoom, **kwargs) # inherited from the parent, in this case, ipyleaflet\n\n    if 'layers_control' not in kwargs:\n        kwargs['layers_control'] = True\n\n    if kwargs['layers_control']:\n        self.add_layers_control()\n\n    self.add_search_control()\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>basemap</code> <code>str</code> <p>description</p> required <p>Exceptions:</p> Type Description <code>ValueError</code> <p>description</p> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n\"\"\"_summary_\n\n    Args:\n        basemap (str): _description_\n\n    Raises:\n        ValueError: _description_\n    \"\"\"\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == 'roadmap':\n        url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name = basemap, **kwargs)\n    elif basemap.lower() == 'satellite':\n        url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n        self.add_tile_layer(url, name = basemap, **kwargs)\n    else:\n        try:\n            basemap = eval(f'xyz.{basemap}')\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(url, name = basemap, attribution = attribution, **kwargs)\n        except:\n            raise ValueError(f'{basemap} is not found')\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_draw_control","title":"<code>add_draw_control(self, position='topleft', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to 'topleft'.</p> <code>'topleft'</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_draw_control(self, position = 'topleft', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        position (str, optional): _description_. Defaults to 'topleft'.\n    \"\"\"        \n    draw_control = ipyleaflet.DrawControl(position = position, **kwargs)\n    self.add_control(draw_control)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJSON', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to 'GeoJSON'.</p> <code>'GeoJSON'</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_geojson(self, data, name = 'GeoJSON', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        data (str): _description_\n        name (str, optional): _description_. Defaults to 'GeoJSON'.\n    \"\"\"        \n    if isinstance(data, str):\n        import json\n        with open(data, 'r') as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data = data, name = name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_layers_control(self, position = 'topright', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        position (str, optional): _description_. Defaults to 'topright'.\n    \"\"\"        \n    layers_control = ipyleaflet.LayersControl(position = position, **kwargs)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to 'topleft'.</p> <code>'topleft'</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_search_control(self, position = 'topleft', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        position (str, optional): _description_. Defaults to 'topleft'.\n    \"\"\"        \n    if 'url' not in kwargs:\n        kwargs['url'] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n    search_control = ipyleaflet.SearchControl(position = position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_shp","title":"<code>add_shp(self, data, name='ShapeFile', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to 'ShapeFile'.</p> <code>'ShapeFile'</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_shp(self, data, name = 'ShapeFile', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        data (str): _description_\n        name (str, optional): _description_. Defaults to 'ShapeFile'.\n    \"\"\"        \n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_layer(geojson, name = name, **kwargs)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>description</p> required <code>name</code> <code>str</code> <p>description</p> required <code>attribution</code> <code>str</code> <p>description. Defaults to ''.</p> <code>''</code> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def add_tile_layer(self, url, name, attribution = '', **kwargs):\n\"\"\"_summary_\n\n    Args:\n        url (str): _description_\n        name (str): _description_\n        attribution (str, optional): _description_. Defaults to ''.\n    \"\"\"        \n    tile_layer = ipyleaflet.TileLayer(\n        url = url,\n        name = name,\n        attribution = attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>description</p> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def generate_lucky_number(length = 1):\n\"\"\"_summary_\n\n    Args:\n        length (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        int: _description_\n    \"\"\"    \n    result_str = ''.join(random.choice(string.digits) for i in range(length))\n    result_str = int(result_str)\n    return result_str\n</code></pre>"},{"location":"gisfordemo/#gisfordemo.gisfordemo.generate_random_string","title":"<code>generate_random_string(length, upper=False, digit=False, punc=False)</code>","text":"<p>Generates a random string of a given length.</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description</p> required <code>upper</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <code>digit</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <code>punc</code> <code>bool</code> <p>description. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>description</p> Source code in <code>gisfordemo/gisfordemo.py</code> <pre><code>def generate_random_string(length, upper = False, digit = False, punc = False):\n\"\"\"Generates a random string of a given length.\n\n    Args:\n        length (int): _description_\n        upper (bool, optional): _description_. Defaults to False.\n        digit (bool, optional): _description_. Defaults to False.\n        punc (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        str: _description_\n    \"\"\"\n    chars = string.ascii_lowercase\n    if upper:\n        chars += string.ascii_uppercase\n    if digit:\n        chars += string.digits\n    if punc:\n        chars += string.punctuation\n\n    result_str = ''.join(random.choice(chars) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install gisfordemo, run this command in your terminal:</p> <pre><code>pip install gisfordemo\n</code></pre> <p>This is the preferred method to install gisfordemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for gisfordemo can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/ChangwhaOh/gisfordemo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use gisfordemo in a project:</p> <pre><code>import gisfordemo\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import folium\n</pre> import folium In\u00a0[14]: Copied! <pre>a = folium.Map(location = [37.6, 127])\n</pre> a = folium.Map(location = [37.6, 127]) In\u00a0[15]: Copied! <pre>a\n</pre> a Out[15]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/gisfordemo/","title":"Gisfordemo","text":"In\u00a0[1]: Copied! <pre>import gisfordemo\n</pre> import gisfordemo In\u00a0[2]: Copied! <pre>m = gisfordemo.Map(center = [37.5, 127], zoom = 8)\n</pre> m = gisfordemo.Map(center = [37.5, 127], zoom = 8) In\u00a0[3]: Copied! <pre>m\n</pre> m <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[4]: Copied! <pre>m.add_search_control()\n</pre> m.add_search_control() In\u00a0[5]: Copied! <pre>m.add_draw_control()\n</pre> m.add_draw_control()"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import gisfordemo\n</pre> import gisfordemo In\u00a0[2]: Copied! <pre>gisfordemo.generate_random_string(10, upper = True, digit = True)\n</pre> gisfordemo.generate_random_string(10, upper = True, digit = True) Out[2]: <pre>'A8QahNYZwp'</pre> In\u00a0[3]: Copied! <pre>gisfordemo.generate_lucky_number(2)\n</pre> gisfordemo.generate_lucky_number(2) Out[3]: <pre>35</pre> In\u00a0[6]: Copied! <pre>a = gisfordemo.Map(center = [37.5, 127], zoom = 8)\na\n</pre> a = gisfordemo.Map(center = [37.5, 127], zoom = 8) a <pre>Map(center=[37.5, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[12]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap = basemap_to_tiles(basemaps.OpenTopoMap),\n    center = (37.6, 127),\n    zoom = 6\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap = basemap_to_tiles(basemaps.OpenTopoMap),     center = (37.6, 127),     zoom = 6 )  m <pre>Map(center=[37.6, 127], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_\u2026</pre> In\u00a0[2]: Copied! <pre>m.clear_layers()\n</pre> m.clear_layers() In\u00a0[8]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[10]: Copied! <pre>m = leafmap.Map()\nm\n</pre> m = leafmap.Map() m <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"}]}